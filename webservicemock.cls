//Testing callouts to SOAP webservices
//create second test class that implements the WebServiceMock interface
//class must be global or public and must define the doInvoke() method
//doInvoke() must be void and public or global
@isTest
global class SOAPServiceMock implements WebServiceMock{
    global void doInvoke(
        Object stub,
        Object request,
        Map<String, Object> response,
        String endpoint,
        String soapAction,
        String requestName,
        String responseNS,
        String responseName,
        String responseType){
            autoGeneratedClass.ResponseTypeResponse_element responseEl = 
                new AutoGeneratedClass.ResponseTypeResponse_element();
            responseEl.expectedMemberVar = 'this is an example';
            repsone.put('response_x', responseEl);

        }
}

//the first test class will use the Test.setMock() method to direct callouts
//to the class that implements the WebServiceMock interface
//test.setMock takes two parameters
//1. type of interface we're inplementing in mock class(WebServiceMock.class for SOAP callouts)
//2. instance of our implementing class
@isTest
private class SOAPCalloutTest{
    @isTest
    static void testSOAPCallout(){
        Test.setMock(WebServiceMock.class, new SOAPServiceMock());
    }
}